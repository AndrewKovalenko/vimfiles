# Native JS
# -----------------------------------------------------------------------------
snippet proto
	${1:class_name}.prototype.${2:method_name} = function (${3:first_argument}) {
		${4:// body...}
	};
snippet fun
	function ${1:function_name}(${2:argument}) {
		${3:// body...}
	}
snippet anon
	function () {
		${1:// body}
	}
snippet fa
	function () {
		${1:// body}
	}
snippet vf
	var ${1:var_name} = function (${2:argument}) {
		${3:// body...}
	};
snippet f
	function(${1}) {${2}}
snippet if
	if (${1:true}) {
		${2}
	}
snippet ife
	if (${1:true}) {
		${2}
	}
	else {
		${3}
	}
snippet ter
	(${1:/* condition */}) ? ${2:a} : ${3:b};
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
snippet for
	for (var ${2:i} = 0, ${3:len} = ${1:Things}.length; $2 < $3; $2 += 1) {
		${4:$1[$2]};
	}
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3: -= 1}) {
		${4:$1[$2]};
	}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
snippet do
	do {))
		${2:/* code */}
	} while (${1:/* condition */});
snippet :f
	${1:method_name}: function (${2:attribute}) {
		${4}
	}${3:,}
snippet :,
	${1:value_name}: ${2:value}${3:,}
snippet timeout
	setTimeout(function () {
		${2}
	}, ${1:ms});
snippet interval
	setInterval(function () {
		${2}
	}, ${1:ms});
snippet getBy
	getElementsBy${1:Id/TagName}('${2}');
snippet callback
	(function () {
		${1:// body...}
	}());
snippet hr
	// ----------------------------------------------------------------------------
snippet comb
	/**
	 * ${1:Description}
	 */
snippet trace
	console.log(${1});${2}
snippet :inspect
	for (var name in ${1:property}) {
		console.log(name);
	  // console.log(${1:property}[name]);
	}
snippet lint
	/*global ${1:Global} */
snippet sc
	 + ${1:content} + ${2}
snippet throw
	throw new Error('${1:e}');${2}
snippet try
	try {
		${1}
	} catch (err) {
		${2}
	}
snippet var
	var ${1:name} = ${2:value};${3}
# Jasmine ---------------------------------------------------------------------
snippet des
	describe('${1:description}', function () {
		${2}
	});
snippet it
	it('${1:description}', function () {
		${2}
	});
snippet bef
	beforeEach(function () {
		${1}
	});
snippet aft
	afterEach(function () {
		${1}
	});
snippet runs
	runs(function () {
		${1}
	});
snippet waits
	waits(${1});
snippet ex
	expect(${1:target})${2};
snippet ee
	expect(${1:target}).toEqual(${2:value});${3}
snippet em
	expect(${1:target}).toMatch(${2:pattern});${3}
snippet et
	expect(${1:target}).toBeTruthy();${2}
snippet ef
	expect(${1:target}).toBeFalsy();${2}
snippet ed
	expect(${1:target}).toBeDefined();${2}
snippet en
	expect(${1:target}).toBeNull();${2}
snippet ec
	expect(${1:target}).toContain(${2:value});${3}
snippet notx
	expect(${1:target}).not${2};
snippet note
	expect(${1:target}).not.toEqual(${2:value});${3}
snippet notm
	expect(${1:target}).not.toMatch(${2:pattern});${3}
snippet nott
	expect(${1:target}).not.toBeTruthy();${2}
snippet notf
	expect(${1:target}).not.toBeFalsy();${2}
snippet notd
	expect(${1:target}).not.toBeDefined();${2}
snippet notn
	expect(${1:target}).not.toBeNull();${2}
snippet notc
	expect(${1:target}).not.toContain(${2:value});${3}
snippet esc
	expect(${1:target}).wasCalled();${2}
snippet escw
	expect(${1:target}).wasCalledWith(${2:arguments});${3}
snippet notsc
	expect(${1:target}).wasNotCalled();${2}
snippet notscw
	expect(${1:target}).wasNotCalledWith(${2:arguments});${3}
snippet sp
	spyOn(${1:object}, '${2:method}')${3};
snippet sr
	spyOn(${1:object}, '${2:method}').andReturn(${3:arguments});${4}
snippet st
	spyOn(${1:object}, '${2:method}').andThrow(${3:exception});${4}
snippet sct
	spyOn(${1:object}, '${2:method}').andCallThrough();${3}
snippet scf
	spyOn(${1:object}, '${2:method}').andCallFake(${3:function});${4}
# Prototype Library  ----------------------------------------------------------
snippet class
	var ${1:MyClass} = Class.create(${2:Super}, {
		initialize: function (${3:args}) {
			${4}
		}
	});
snippet addMethods
	${1:Class}.addMethods({
		${2:method}: function (${3:args}) {
			${4}
		}
	});
# Prototype Object
snippet clone
	Object.clone(${1:obj});${2}
snippet extend
	Object.extend(${1:destination}, ${2:source});${3}
snippet inspect
	Object.inspect(${1:obj});${2}
snippet keys
	Object.keys(${1:obj});${2}
snippet values
	Object.values(${1:obj});${2}
# Prototype Ajax
snippet ajax Ajax.PeriodicalUpdater
	new Ajax.PeriodicalUpdater('${1:container}', '${2:url}', 
		{ method: '${3:get/post}', frequency: ${4:3}, decay: ${5:2} }
	);${6}
snippet ajax Ajax.Request
	new Ajax.Request('${1:url}', {
		onSuccess: function (response) {
			${2:// Handle the response content...}
		}
	});
snippet ajax Ajax.Updater
	new Ajax.Updater('items', '/items', 
		{ parameters: { text: $F('text') } }
	);
# Prototype Enumerables
snippet all
	all(function (${1:value}) {
		${3}
	}, ${2:context});
snippet any
	any(function (${1:value}) {
		${3}
	}, ${2:context});
snippet collect
	collect(function (${1:value}) {
		${3}
	}, ${2:context});
snippet detect
	detect(function (${1:value}) {
		${3}
	}, ${2:context});
snippet each
	each(function (${1:value}) {
		${3}
	}, ${2:context});
snippet eachSlice
	eachSlice(${1:number}, function (${2:value}) {
		${4}
	}, ${3:context});
snippet findAll
	findAll(function (${1:value}) {
		${3}
	}, ${2:context});
snippet inject
	inject(${1:initial_value}, function (${2:accumulator}, ${3:value}) {
		${5}
		return $2;
	}, ${4:context});
snippet invoke
	invoke('${1:methodName}', ${2:optional_args});${3}
snippet partion
	partion(function (${1:value}) {
		${3}
	}, ${2:context});
snippet pluck
	pluck('${1:property}');${2}
snippet reject
	reject(function (${1:value}) {
		${3}
	}, ${2:context});
snippet sortBy
	sortBy(function (${1:value}) {
		${3}
	}, ${2:context});
# Prototype Event
snippet observe
	observe('${1:eventName}', ${2:handler});${3}
snippet stopObserving
	stopObserving('${1:eventName}', ${2:handler});${3}
snippet loaded
	document.observe('dom:loaded', function () {
		${1:// add initialize calls}
	});
# Prototype Functions
snippet bind
	bind(${1:this});${2}
snippet bindc
	bind(${1:this}, ${2:curry});${3}
snippet curry
	curry(${1:args});${2}
# Prototype Elements
snippet elabs
	absolutize();${1}
snippet elacn
	addClassName('${1:className}');${2}
snippet eladj
	adjacent('${1:selector...}');${2}
snippet elanc
	ancestors();${1}
snippet elce
	childElements();${1}
snippet elcl
	clone('${1:element}', ${2:isDeep});${3}
snippet eldo
	descendantOf('${1:ancestor}');${2}
snippet eldes
	descendants();${1}
snippet eld
	down(${1:selector/index});${2}
snippet elempty
	empty();${1}
snippet elext
	extend();${1}
snippet elfire
	fire('${1:eventName}', ${2:curry});${3}
snippet elfd
	firstDescendant();${1}
snippet elgd
	getDimensions();${1}
snippet elgh
	getHeight();${1}
snippet elgw
	getWidth();${1}
snippet elgo
	getOpacity();${1}
snippet elgs
	getStyle('${1:style}');${2}
snippet elha
	hasStyle('${1:style}');${2}
snippet elhcn
	hasClassName('${1:className}');${2}
snippet elh
	hide();${1}
snippet elid
	identify();${1}
snippet eli
	insert('${1:content}');${2}
snippet elio
	insert({
		before: "${1:content}",
		after: "${2:content}",
		top: "${3:content}",
		bottom: "${4:content}"
	});${5}
snippet elmatch
	match('${1:selector}');${2}
snippet eln
	next(${1:selector/index});${2}
snippet elns
	nextSiblings();${1}
snippet elp
	previous(${1:selector/index});${2}
snippet elps
	previousSiblings();${1}
snippet elra
	readAttribute('${1:attributeName}');${2}
snippet elrc
	recursivelyCollect('${1:property}');${2}
snippet elrel
	relativize();${1}
snippet elr
	remove();${1}
snippet elrcn
	removeClassName('${1:className}');${2}
snippet elrepl
	replace(${1:content});${2}
snippet elst
	scrollTo();${1}
snippet els
	select('${1:expression}');${2}
snippet elso
	setOpacity(${1:opacity});${2}
snippet elss
	setStyle({
		${1:prop}: ${2:value}${3:,}
	});
snippet elsh
	show();${1}
snippet elsibs
	siblings();${1}
snippet elt
	toggle();${1}
snippet eltcn
	toggleClassName('${1:className}');${2}
snippet elu
	up(${1:selector/index});${2}
snippet elupd
	update(${1:content});${2}
snippet elv
	visible();${1}
snippet elwa
	writeAttribute(${1:attribute});${2}
# Scriptaculous ---------------------------------------------------------------
snippet efo
	new Effect.Opacity(${1:element}, {${2:options}});${3}
snippet efs
	new Effect.Scale(${1:element}, ${2:percent}, {${3:options}});${4}
snippet efmrf
	new Effect.Morph(${1:element}, {style: ${2:styles}}, {${3:options}});${4}
snippet efm
	new Effect.Move(${1:element}, {${2:options}});${3}
snippet efh
	new Effect.Highlight(${1:element}, {${2:options}});${3}
snippet eft
	new Effect.Tween(${1:element}, ${2:start}, ${3:end}, {${4:options}}, ${5:callback});${6}
snippet efp
	new Effect.Parallel([
			${1:array of subeffects}
		], 
		{${2:options}}
	);${3}
snippet tranny Sinoidal
	Effect.Transitions.sinoidal
snippet tranny Linear
	Effect.Transitions.linear
snippet tranny Reverse
	Effect.Transitions.reverse
snippet tranny Wobble
	Effect.Transitions.wobble
snippet tranny Flicker
	Effect.Transitions.flicker
snippet tranny Pulse
	Effect.Transitions.pulse
snippet tranny Spring
	Effect.Transitions.spring
snippet tranny None
	Effect.Transitions.none
snippet tranny Full
	Effect.Transitions.full
# jQuery ----------------------------------------------------------------------
snippet ready
	jQuery(document).ready(function ($) {
		${1:// add initialize calls}
	});
snippet add
	add('${1:selector/elements/html}');${2}
snippet addClass
	addClass('${1:className}');${2}
snippet after
	after('${1:content}');${2}
snippet andSelf
	andSelf();${1}
snippet animate Animate
	animate({${1:props}}, ${2:duration}, '${3:easing}');${4}
snippet animate Animate Callback
	animate({${1:props}}, ${2:duration}, '${3:easing}', function () {
		${4:// handle complete...}
	});
snippet append
	append('${1:content}');${2}
snippet appendTo
	appendTo(${1:selector});${2}
snippet attr
	attr(${1:attrName}, ${2:value or function});${3}
snippet before
	before('${1:content}');${2}
snippet jbind
	bind('${1:eventName}', ${2:handler});${3}
snippet blur
	blur(${1:handler});
snippet change
	change(${1:handler});
snippet children
	children(${1:[selector]});${2}
snippet clearQueue
	clearQueue(${1:[queueName]});${2}
snippet click
	click(${1:handler});
snippet jclone
	clone();${1}
snippet closest
	closest(${1:selector});${2}
snippet contains
	contains('${1:find}');${2}
snippet contents
	contents();${1}
snippet css
	css(${1:get or set});${2}
snippet data
	data(${1:get or set});${2}
snippet dblclick
	dblclick(${1:handler});
snippet delay
	delay(${1:duration});${2}
snippet delegate
	delegate(${1:selector}, '${2:eventType}', ${3:handler});${4}
snippet dequeue
	dequeue(${1:[queueName]});${2}
snippet detach
	dequeue(${1:[selector]});${2}
snippet die
	die(${1:eventType});${2}
snippet jeach
	each(function (index) {
		${1:// Act on the iteration}
	});${2}
snippet empty
	empty();${1}
snippet end
	end();${1}
snippet eq
	eq(${1:index});${2}
snippet error
	error(${1:handler});
snippet fadeIn Fade In
	fadeIn(${1:duration}, '${2:easing}');${3}
snippet fadeIn Fade In Callback
	fadeIn(${1:duration}, '${2:easing}', function () {
		${3:// handle complete...}
	});
snippet fadeOut Fade Out
	fadeOut(${1:duration}, '${2:easing}');${3}
snippet fadeOut Fade Out Callback
	fadeOut(${1:duration}, '${2:easing}', function () {
		${3:// handle complete...}
	});
snippet fadeTo Fade To
	fadeTo(${1:duration}, ${2:opacity}, '${3:easing}');${4}
snippet fadeTo Fade To Callback
	fadeTo(${1:duration}, ${2:opacity}, '${3:easing}', function () {
		${4:// handle complete...}
	});
snippet filter
	filter(${1:selector/function});${2}
snippet find
	find('${1:selector}');${2}
snippet first
	first();${1}
snippet focus
	focus(${1:handler});
snippet focusin
	focusin(${1:handler});
snippet focusout
	focusout(${1:handler});
snippet get
	get(${1:[index]});${2}
snippet has
	has(${1:selector});${2}
snippet hasClass
	hasClass('${1:className}');${2}
snippet height
	height(${1});${2}
snippet hide
	hide(${1});${2}
snippet hover
	hover(${1:handlerIn}, ${2:handlerOut});${3}
snippet html
	html(${1});${2}
snippet index
	index(${1});${2}
snippet innerHeight
	innerHeight(${1});${2}
snippet innerWidth
	innerWidth(${1});${2}
snippet is
	is(${1});${2}
snippet keydown
	keydown(${1:handler});
snippet keypress
	keypress(${1:handler});
snippet keyup
	keyup(${1:handler});
snippet last
	last();${1}
snippet live
	live('${1:eventType(s)}', function (${2:event}) {
		${3:// Act on the event}
	});
snippet load
	load(${1:handler});
snippet map
	map(function (index, elem) {
		return ${1:something};
	});
snippet mousedown
	mousedown(${1:handler});
snippet mouseenter
	mouseenter(${1:handler});
snippet mouseleave
	mouseleave(${1:handler});
snippet mousemove
	mousemove(${1:handler});
snippet mouseout
	mouseout(${1:handler});
snippet mouseover
	mouseover(${1:handler});
snippet mouseup
	mouseup(${1:handler});
snippet next
	next(${1:[selector]});${2}
snippet nextAll
	nextAll(${1:[selector]});${2}
snippet nextUntil
	nextUntil(${1:[selector]});${2}
snippet not
	not(${1});${2}
snippet offset
	offset(${1});${2}
snippet offsetParent
	offsetParent();${1}
snippet one
	one('${1:eventName}', ${2:handler});
snippet outerHeight
	outerHeight(${1:[includeMargin]});${2}
snippet outerWidth
	outerWidth(${1:[includeMargin]});${2}
snippet parent
	parent(${1:[selector]});${2}
snippet parents
	parents(${1:[selector]});${2}
snippet parentsUntil
	parentsUntil(${1:[selector]});${2}
snippet position
	position();${1}
snippet prepend
	prepend(${1:content});${2}
snippet prependTo
	prependTo(${1:selector});${2}
snippet prev
	prev(${1:[selector]});${2}
snippet prevAll
	prevAll(${1:[selector]});${2}
snippet prevUntil
	prevUntil(${1:[selector]});${2}
snippet pushStack
	pushStack(${1:elements});${2}
snippet queue
	queue(${1:[queueName]});${2}
snippet remove
	remove(${1:[selector]});${2}
snippet removeAttr
	removeAttr('${1:attributeName}');${2}
snippet removeClass
	removeClass('${1:className}');${2}
snippet removeData
	removeData('${1:name}');${2}
snippet replaceAll
	replaceAll('${1:element}');${2}
snippet replaceWith
	replaceWith(${1:content/function});${2}
snippet resize
	resize(${1:handler});
snippet scroll
	scroll(${1:handler});
snippet scrollLeft
	scrollLeft(${1});${2}
snippet scrollTop
	scrollTop(${1});${2}
snippet select
	select(${1:handler});${2}
snippet serialize
	serialize();${1}
snippet serializeArray
	serializeArray();${1}
snippet show
	show(${1});${2}
snippet siblings
	siblings(${1:[selector]});${2}
snippet size
	size();${1}
snippet slice
	slice(${1:start}, ${2:[end]});${3}
snippet slideDown Slide Down
	slideDown(${1:duration}, '${2:easing}');${3}
snippet slideDown Slide Down Callback
	slideDown(${1:duration}, '${2:easing}', function () {
		${3:// handle complete...}
	});
snippet slideToggle Slide Toggle
	slideToggle(${1:duration}, '${2:easing}');${3}
snippet slideToggle Slide Toggle Callback
	slideToggle(${1:duration}, '${2:easing}', function () {
		${3:// handle complete...}
	});
snippet slideUp Slide Up
	slideUp(${1:duration}, '${2:easing}');${3}
snippet slideUp Slide Up Callback
	slideUp(${1:duration}, '${2:easing}', function () {
		${3:// handle complete...}
	});
snippet stop
	stop(${1:[clearQueue]}, ${2:[jumpToEnd]});${3}
snippet submit
	submit(${1:handler});
snippet text
	text(${1});${2}
snippet toArray
	toArray();${1}
snippet toggle
	toggle(${1});${2}
snippet toggleClass
	toggleClass('${1:className}');${2}
snippet trigger
	trigger('${1:eventType}'${2:[curry]});${3}
snippet triggerHandler
	triggerHandler('${1:eventType}'${2:[curry]});${3}
snippet unbind
	unbind('${1:eventName}', ${2:handler});${3}
snippet undelegate
	undelegate(${1:selector}, '${2:eventType}', ${3:handler});${4}
snippet unload
	unload(${1:handler});
snippet unwrap
	unwrap();${1}
snippet val
	val(${1});${2}
snippet width
	width(${1});${2}
snippet wrap
	wrap(${1:element/function});${2}
snippet wrapAll
	wrapAll(${1:element});${2}
snippet wrapInner
	wrapInner(${1:element/function});${2}
# Node.js ---------------------------------------------------------------------
snippet inherit
	${1}.prototype.__proto__ = ${2}.prototype;
snippet req
	require('${2:module}');${3}
snippet mod
	var ${1:name} = require('${2:module}');${3}
snippet rf
	fs.readFile('${1:path}', function (err, data) {
		${2:// body...}
	});${3}
snippet rfs
	fs.readFileSync('${1:path}');${2}
snippet nt
	process.nextTick(function () {
		${1:// body...}
	});${3}
snippet cwd
	process.cwd();${1}
snippet suid
	process.setuid('${1:name string or id}');${2}
snippet sgid
	process.setgid('${1:name string or id}');${2}
snippet um
	process.unmask(${1});${2}
snippet ver
	process.version;${2}
snippet cd
	process.chdir('${1:directory}');${2}
snippet kill
	process.kill(${1:pid}, 'SIG${2:INT}');${3}
snippet compile
	process.compile('${1:source}', '${2:filename}');${3}
snippet exit
	process.exit(${1:1});${2}
snippet al
	addListener('${1:event}', function (${2}) {
		${3:// body...}
	});
snippet on
	on('${1:event}', function (${2}) {
		${3:// body...}
	});
snippet trap
	addListener('SIG${1:INT}', function () {
		${2:// body...}
	});
snippet se
	setEncoding('${1:utf8}');${2}
snippet i
	sys.inherits(${1:Subclass}, ${2:Superclass});${3}
snippet emit
	emit('${1:event}');${2}
# Raphael.js ------------------------------------------------------------------
snippet paper
	var paper = Raphael(${1:x}, ${2:y}, ${3:width}, ${4:height});${5}
snippet circ
	circle(${1:x}, ${2:y}, ${3:radius});${4}
snippet rect
	rect(${1:x}, ${2:y}, ${3:width}, ${4:height});${5}
snippet rrect
	rect(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:radius});${6}
snippet ellipse
	ellipse(${1:x}, ${2:y}, ${3:rx}, ${4:ry});${5}
snippet image
	image('${1:src}', ${2:x}, ${3:y}, ${4:width}, ${5:height});${6}
snippet rtext
	text(${1:x}, ${2:y}, '${3:text}');${4}
snippet path
	path('${1:path}');${2}
snippet clear
	clear();${1}
snippet rotate
	rotate(${1:degree}${2});${3}
snippet translate
	translate(${1:dx}, ${2:dy});${3}
snippet scale
	scale(${1:hx}, ${2:hy});${3}
snippet rattr
	attr({${1:name}: ${2:value}});${3}
snippet animate
	animate(${1:attributes});
snippet getbb
	getBBox()${1};
snippet front
	toFront();${1}
snippet back
	toBack();${1}
snippet ibefore
	insertBefore(${1:object});${2}
snippet iafter
	insertAfter(${1:object});${2}
snippet tlen
	getTotalLength();${1}
snippet plen
	getPointAtLength(${1:length});${2}
snippet subpath
	getSubpath(${1:from}, ${2:to});${3}
snippet ssize
	setSize(${1:width}, ${2:height});${3}
snippet grgb
	getRGB(${1:attr});${2}
snippet angle
	angle(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2});${5}
snippet rad
	rad(${1:degree});${2}
snippet deg
	deg(${1:radian});${2}
snippet snap
	snapTo(${1:number or array}, ${2:value}, ${3:tolerance});${4}
snippet gcolor
	getColor();${1}
snippet gcolorr
	getColor.reset();${1}
snippet regfont
	registerFont(${1:font});${2}
snippet gfont
	getFont(${1:font});${2}
snippet safari
	safari();
snippet rExt
	Raphael.fn.${1:method} = function () {
		var paper = this;
		paper.safari();
		return {
			${2:// body...}
		};
	};
snippet rAddEl
	Raphael.el.${1:element} = function () {
		this.attr({${2:name}: ${3:value}});
	};${4}
